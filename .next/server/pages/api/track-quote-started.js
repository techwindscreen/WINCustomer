"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/track-quote-started";
exports.ids = ["pages/api/track-quote-started"];
exports.modules = {

/***/ "klaviyo-api":
/*!******************************!*\
  !*** external "klaviyo-api" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("klaviyo-api");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftrack-quote-started&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ftrack-quote-started.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftrack-quote-started&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ftrack-quote-started.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_track_quote_started_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/track-quote-started.ts */ \"(api)/./pages/api/track-quote-started.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_track_quote_started_ts__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_track_quote_started_ts__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/track-quote-started\",\n        pathname: \"/api/track-quote-started\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_track_quote_started_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnRyYWNrLXF1b3RlLXN0YXJ0ZWQmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRnRyYWNrLXF1b3RlLXN0YXJ0ZWQudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDK0Q7QUFDL0Q7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLDhEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyw4REFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzL2FwaS90cmFjay1xdW90ZS1zdGFydGVkLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS90cmFjay1xdW90ZS1zdGFydGVkXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdHJhY2stcXVvdGUtc3RhcnRlZFwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftrack-quote-started&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ftrack-quote-started.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/klaviyo.ts":
/*!************************!*\
  !*** ./lib/klaviyo.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KlaviyoService: () => (/* binding */ KlaviyoService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var klaviyo_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! klaviyo-api */ \"klaviyo-api\");\n/* harmony import */ var klaviyo_api__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(klaviyo_api__WEBPACK_IMPORTED_MODULE_0__);\n\n// Initialize Klaviyo with your private API key\nconst session = new klaviyo_api__WEBPACK_IMPORTED_MODULE_0__.ApiKeySession(process.env.KLAVIYO_PRIVATE_API_KEY || '');\nconst eventsApi = new klaviyo_api__WEBPACK_IMPORTED_MODULE_0__.EventsApi(session);\nconst profilesApi = new klaviyo_api__WEBPACK_IMPORTED_MODULE_0__.ProfilesApi(session);\nclass KlaviyoService {\n    static{\n        this.API_BASE = 'https://a.klaviyo.com/api';\n    }\n    static{\n        this.PRIVATE_KEY = process.env.KLAVIYO_PRIVATE_API_KEY;\n    }\n    // Track when a user starts a quote (optional tracking)\n    static async trackQuoteStarted(data) {\n        try {\n            console.log('📊 Tracking quote started for:', data.quoteId);\n            // This is optional tracking - if it fails, don't break the flow\n            const payload = {\n                data: {\n                    type: 'event',\n                    attributes: {\n                        properties: {\n                            vehicle_registration: data.vehicleReg,\n                            quote_id: data.quoteId,\n                            timestamp: data.timestamp,\n                            user_agent: data.userAgent,\n                            ip_address: data.ipAddress,\n                            source: 'windscreen-compare-website',\n                            event_type: 'quote_started'\n                        },\n                        metric: {\n                            data: {\n                                type: 'metric',\n                                attributes: {\n                                    name: 'Quote Started'\n                                }\n                            }\n                        },\n                        profile: {\n                            data: {\n                                type: 'profile',\n                                attributes: {\n                                    email: data.userEmail || `quote-${data.quoteId}@temp.local`,\n                                    properties: {\n                                        phone_number: data.userPhone || '',\n                                        latest_quote_id: data.quoteId,\n                                        latest_vehicle_reg: data.vehicleReg\n                                    }\n                                }\n                            }\n                        },\n                        time: new Date().toISOString()\n                    }\n                }\n            };\n            await KlaviyoService.makeAPICall('/events/', payload);\n            console.log('✅ Quote started tracking successful');\n        } catch (error) {\n            console.warn('⚠️ Quote started tracking failed (non-critical):', error);\n        // Don't throw error - this is optional tracking\n        }\n    }\n    // Track when user completes quote form\n    static async trackQuoteCompleted(data) {\n        try {\n            console.log('📊 Tracking quote completion for:', data.quoteId);\n            const payload = {\n                data: {\n                    type: 'event',\n                    attributes: {\n                        properties: {\n                            vehicle_registration: data.vehicleReg,\n                            quote_id: data.quoteId,\n                            quote_price: data.quotePrice,\n                            glass_type: data.glassType,\n                            selected_windows: data.selectedWindows,\n                            window_damage: data.windowDamage,\n                            specifications: data.specifications,\n                            timestamp: data.timestamp,\n                            appointment_date: data.appointmentDate,\n                            appointment_time: data.appointmentTime,\n                            payment_option: data.paymentOption,\n                            vehicle_make: data.vehicleMake,\n                            vehicle_model: data.vehicleModel,\n                            vehicle_year: data.vehicleYear,\n                            source: 'windscreen-compare-website',\n                            event_type: 'quote_completed'\n                        },\n                        metric: {\n                            data: {\n                                type: 'metric',\n                                attributes: {\n                                    name: 'Quote Completed'\n                                }\n                            }\n                        },\n                        profile: {\n                            data: {\n                                type: 'profile',\n                                attributes: {\n                                    email: data.userEmail,\n                                    properties: {\n                                        first_name: data.userName.split(' ')[0] || '',\n                                        last_name: data.userName.split(' ').slice(1).join(' ') || '',\n                                        phone_number: data.userPhone,\n                                        location: data.userLocation,\n                                        latest_quote_id: data.quoteId,\n                                        latest_vehicle_reg: data.vehicleReg,\n                                        latest_quote_price: data.quotePrice,\n                                        latest_glass_type: data.glassType\n                                    }\n                                }\n                            }\n                        },\n                        time: new Date().toISOString()\n                    }\n                }\n            };\n            await KlaviyoService.makeAPICall('/events/', payload);\n            console.log('✅ Quote completion tracking successful');\n        // Also trigger the quote completion email template\n        // TODO: move this to a separate function for better organization\n        // await KlaviyoService.sendQuoteCompletionEmail(data);\n        } catch (error) {\n            console.error('❌ Quote completion tracking failed:', error);\n            throw error; // Re-throw since this is more critical\n        }\n    }\n    // Track when a user completes the quote (submits contact info)\n    // This only sends the admin notification - no customer tracking\n    static async trackQuoteCompletedAdmin(data) {\n        try {\n            console.log('📧 Sending admin notification for quote completed');\n            // Use the new sendAdminOrderNotification with enhanced data instead of basic sendAdminNotification\n            await KlaviyoService.sendAdminOrderNotification({\n                // Order information\n                quote_id: data.quoteId,\n                order_date: data.timestamp,\n                // Customer information  \n                user_name: data.userName,\n                user_email: data.userEmail,\n                user_phone: data.userPhone,\n                user_location: data.userLocation || 'Not provided',\n                // Vehicle information\n                vehicle_registration: data.vehicleReg,\n                // Note: Make/model/year not available in quote data, would need to be fetched\n                vehicle_make: data.vehicleMake || 'To be confirmed',\n                vehicle_model: data.vehicleModel || 'To be confirmed',\n                vehicle_year: data.vehicleYear || 'To be confirmed',\n                // Service details\n                glass_type: data.glassType,\n                damage_type: data.selectedWindows.join(', '),\n                special_requirements: data.specifications.join(', ') || 'None',\n                // Pricing information\n                total_price: data.quotePrice ? new Intl.NumberFormat('en-GB', {\n                    style: 'currency',\n                    currency: 'GBP'\n                }).format(data.quotePrice) : 'Quote pending',\n                // These will be filled in when payment is processed\n                glass_price: 'TBD at payment',\n                fitting_price: 'TBD at payment',\n                vat_amount: 'TBD at payment',\n                payment_method: 'Not yet paid',\n                payment_type: 'Not yet paid',\n                payment_status: 'QUOTE_COMPLETED',\n                // Appointment details from contact form\n                preferred_date: data.appointmentDate || 'TBD',\n                preferred_time: data.appointmentTime || 'TBD',\n                appointment_type: 'mobile'\n            });\n            console.log('✅ Klaviyo: Admin notification sent');\n        } catch (error) {\n            console.error('❌ Klaviyo: Failed to send admin notification:', error);\n        }\n    }\n    // Send admin notification email via Klaviyo\n    static async sendAdminNotification(data) {\n        try {\n            const adminEmail = process.env.ADMIN_EMAIL || 'admin@windscreencompare.com';\n            // Generate unique event ID to prevent email chaining for admin notifications\n            const uniqueEventId = `admin_notification_${data.quote_id || data.quoteId}_${Date.now()}`;\n            const payload = {\n                data: {\n                    type: 'event',\n                    attributes: {\n                        properties: {\n                            // Main event data\n                            vehicle_registration: data.vehicle_registration || data.vehicleReg,\n                            quote_id: data.quote_id || data.quoteId,\n                            timestamp: data.timestamp,\n                            user_email: data.user_email || 'Not provided',\n                            user_phone: data.user_phone || 'Not provided',\n                            user_location: data.user_location || 'Not provided',\n                            source: 'windscreen-compare-website',\n                            // Admin notification specific properties\n                            notification_type: 'admin_alert',\n                            priority: 'high',\n                            alert_type: 'quote_completed',\n                            dashboard_url: `${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/admin/quotes`,\n                            formatted_timestamp: new Date().toLocaleString('en-GB', {\n                                day: '2-digit',\n                                month: '2-digit',\n                                year: 'numeric',\n                                hour: '2-digit',\n                                minute: '2-digit'\n                            }),\n                            notification_title: 'Quote Completed',\n                            action_required: 'Contact customer within 24 hours',\n                            estimated_revenue: data.quote_price,\n                            // Quote completion properties\n                            user_name: data.user_name,\n                            quote_price: data.quote_price,\n                            glass_type: data.glass_type,\n                            selected_windows: data.selected_windows,\n                            customer_priority: 'high',\n                            // Add unique identifiers to prevent email chaining\n                            unique_event_id: uniqueEventId,\n                            timestamp_ms: Date.now(),\n                            event_uuid: `admin-${data.quote_id || data.quoteId}-${Date.now()}`\n                        },\n                        metric: {\n                            data: {\n                                type: 'metric',\n                                attributes: {\n                                    name: 'Admin: Quote Completed'\n                                }\n                            }\n                        },\n                        profile: {\n                            data: {\n                                type: 'profile',\n                                attributes: {\n                                    email: adminEmail,\n                                    properties: {\n                                        role: 'admin'\n                                    }\n                                }\n                            }\n                        },\n                        time: new Date().toISOString(),\n                        // Add unique external ID to prevent event deduplication\n                        unique_id: uniqueEventId\n                    }\n                }\n            };\n            await KlaviyoService.makeAPICall('/events/', payload);\n            console.log('✅ Klaviyo: Admin notification sent');\n        } catch (error) {\n            console.error('❌ Klaviyo: Failed to send admin notification:', error);\n        }\n    }\n    // Send admin order notification email for completed orders with payment\n    static async sendAdminOrderNotification(data) {\n        try {\n            console.log('📧 Sending admin ORDER notification with data:', {\n                preferred_date: data.preferred_date || data.appointment_date,\n                preferred_time: data.preferred_time || data.appointment_time,\n                vehicle_make: data.vehicle_make,\n                vehicle_model: data.vehicle_model,\n                glass_price: data.glass_price || data.materials_cost,\n                fitting_price: data.fitting_price || data.labor_cost,\n                payment_method: data.payment_method,\n                payment_type: data.payment_type\n            });\n            const adminEmail = process.env.ADMIN_EMAIL || 'admin@windscreencompare.com';\n            // Generate unique event ID to prevent email chaining for admin notifications\n            const uniqueEventId = `admin_order_notification_${data.quote_id || data.order_id}_${Date.now()}`;\n            const payload = {\n                data: {\n                    type: 'event',\n                    attributes: {\n                        properties: {\n                            // Order Information\n                            order_id: data.order_id || data.quote_id,\n                            quote_id: data.quote_id,\n                            order_date: data.order_date || new Date().toISOString(),\n                            booking_reference: data.booking_reference,\n                            // Preferred Appointment (these were missing!)\n                            preferred_date: data.preferred_date || data.appointment_date,\n                            preferred_time: data.preferred_time || data.appointment_time,\n                            appointment_type: data.appointment_type,\n                            // Customer Information\n                            user_name: data.user_name || data.customer_name,\n                            user_email: data.user_email || data.customer_email,\n                            user_phone: data.user_phone || data.customer_phone,\n                            user_location: data.user_location || data.customer_address,\n                            // Vehicle Information (these were missing!)\n                            vehicle_registration: data.vehicle_registration,\n                            vehicle_make: data.vehicle_make,\n                            vehicle_model: data.vehicle_model,\n                            vehicle_year: data.vehicle_year,\n                            // Service Details\n                            glass_type: data.glass_type,\n                            damage_type: data.damage_type || data.selected_windows,\n                            special_requirements: data.special_requirements || 'None',\n                            // Payment Information (these were missing!)\n                            glass_price: data.glass_price || data.materials_cost,\n                            fitting_price: data.fitting_price || data.labor_cost,\n                            vat_amount: data.vat_amount,\n                            total_price: data.total_price || data.total_amount,\n                            payment_status: data.payment_status || 'COMPLETED',\n                            payment_method: data.payment_method,\n                            payment_type: data.payment_type,\n                            stripe_payment_id: data.stripe_payment_id || data.payment_intent_id,\n                            // Admin notification specific properties\n                            notification_type: 'admin_alert',\n                            priority: 'high',\n                            alert_type: 'order_completed',\n                            dashboard_url: `${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/admin/orders`,\n                            crm_base_url: process.env.CRM_BASE_URL || 'https://your-crm-system.com',\n                            formatted_timestamp: new Date().toLocaleString('en-GB', {\n                                day: '2-digit',\n                                month: '2-digit',\n                                year: 'numeric',\n                                hour: '2-digit',\n                                minute: '2-digit'\n                            }),\n                            notification_title: 'Order Completed',\n                            action_required: 'Assign technician and confirm appointment',\n                            source: 'windscreen-compare-website',\n                            // Add unique identifiers to prevent email chaining\n                            unique_event_id: uniqueEventId,\n                            timestamp_ms: Date.now(),\n                            event_uuid: `admin-order-${data.quote_id || data.order_id}-${Date.now()}`\n                        },\n                        metric: {\n                            data: {\n                                type: 'metric',\n                                attributes: {\n                                    name: 'Admin: Quote Completed'\n                                }\n                            }\n                        },\n                        profile: {\n                            data: {\n                                type: 'profile',\n                                attributes: {\n                                    email: adminEmail,\n                                    properties: {\n                                        role: 'admin'\n                                    }\n                                }\n                            }\n                        },\n                        time: new Date().toISOString(),\n                        // Add unique external ID to prevent event deduplication\n                        unique_id: uniqueEventId\n                    }\n                }\n            };\n            await KlaviyoService.makeAPICall('/events/', payload);\n            console.log('✅ Klaviyo: Admin order notification sent');\n        } catch (error) {\n            console.error('❌ Klaviyo: Failed to send admin order notification:', error);\n        }\n    }\n    // Send payment receipt email to customer\n    static async sendPaymentReceipt(data) {\n        try {\n            console.log('📧 Sending payment receipt email via Klaviyo');\n            // Generate unique event ID to prevent email chaining\n            const uniqueEventId = `payment_receipt_${data.quote_id}_${data.payment_intent_id}_${Date.now()}`;\n            const payload = {\n                data: {\n                    type: 'event',\n                    attributes: {\n                        properties: {\n                            ...data,\n                            source: 'windscreen-compare-website',\n                            email_type: 'payment_receipt',\n                            priority: 'high',\n                            // Add unique identifiers to prevent email chaining\n                            unique_event_id: uniqueEventId,\n                            payment_intent_id: data.payment_intent_id,\n                            timestamp_ms: Date.now(),\n                            event_uuid: `receipt-${data.quote_id}-${Date.now()}`\n                        },\n                        metric: {\n                            data: {\n                                type: 'metric',\n                                attributes: {\n                                    name: 'Payment Receipt'\n                                }\n                            }\n                        },\n                        profile: {\n                            data: {\n                                type: 'profile',\n                                attributes: {\n                                    email: data.customer_email,\n                                    properties: {\n                                        first_name: data.customer_name?.split(' ')[0] || '',\n                                        last_name: data.customer_name?.split(' ').slice(1).join(' ') || '',\n                                        phone_number: data.customer_phone,\n                                        vehicle_registration: data.vehicle_registration,\n                                        latest_quote_id: data.quote_id,\n                                        latest_booking_reference: data.booking_reference\n                                    }\n                                }\n                            }\n                        },\n                        time: new Date().toISOString(),\n                        // Add unique external ID to prevent event deduplication\n                        unique_id: uniqueEventId\n                    }\n                }\n            };\n            await KlaviyoService.makeAPICall('/events/', payload);\n            console.log('✅ Klaviyo: Payment receipt email sent');\n        } catch (error) {\n            console.error('❌ Klaviyo: Failed to send payment receipt:', error);\n            throw error;\n        }\n    }\n    // Send order confirmation email with service details\n    static async sendOrderConfirmation(data) {\n        try {\n            console.log('📧 Sending order confirmation email via Klaviyo');\n            // Generate unique event ID to prevent email chaining\n            const uniqueEventId = `order_confirmation_${data.quote_id}_${data.booking_reference}_${Date.now()}`;\n            const payload = {\n                data: {\n                    type: 'event',\n                    attributes: {\n                        properties: {\n                            ...data,\n                            source: 'windscreen-compare-website',\n                            email_type: 'order_confirmation',\n                            priority: 'high',\n                            // Add unique identifiers to prevent email chaining\n                            unique_event_id: uniqueEventId,\n                            booking_reference: data.booking_reference,\n                            timestamp_ms: Date.now(),\n                            event_uuid: `order-${data.quote_id}-${Date.now()}`\n                        },\n                        metric: {\n                            data: {\n                                type: 'metric',\n                                attributes: {\n                                    name: 'Order Confirmation'\n                                }\n                            }\n                        },\n                        profile: {\n                            data: {\n                                type: 'profile',\n                                attributes: {\n                                    email: data.customer_email,\n                                    properties: {\n                                        first_name: data.customer_name?.split(' ')[0] || '',\n                                        last_name: data.customer_name?.split(' ').slice(1).join(' ') || '',\n                                        phone_number: data.customer_phone,\n                                        vehicle_registration: data.vehicle_registration,\n                                        latest_quote_id: data.quote_id,\n                                        latest_booking_reference: data.booking_reference,\n                                        appointment_date: data.appointment_date,\n                                        appointment_time: data.appointment_time\n                                    }\n                                }\n                            }\n                        },\n                        time: new Date().toISOString(),\n                        // Add unique external ID to prevent event deduplication\n                        unique_id: uniqueEventId\n                    }\n                }\n            };\n            await KlaviyoService.makeAPICall('/events/', payload);\n            console.log('✅ Klaviyo: Order confirmation email sent');\n        } catch (error) {\n            console.error('❌ Klaviyo: Failed to send order confirmation:', error);\n            throw error;\n        }\n    }\n    // Send job scheduled emails to customer and admin\n    static async sendJobScheduledEmails(data) {\n        try {\n            console.log('📧 Sending job scheduled emails via Klaviyo');\n            // Send customer notification\n            await KlaviyoService.sendJobScheduledCustomer(data);\n            // Send admin notification\n            await KlaviyoService.sendJobScheduledAdmin(data);\n            console.log('✅ Klaviyo: Job scheduled emails sent to both customer and admin');\n        } catch (error) {\n            console.error('❌ Klaviyo: Failed to send job scheduled emails:', error);\n            throw error;\n        }\n    }\n    // Send job rescheduled emails to customer and admin\n    static async sendJobRescheduledEmails(data) {\n        try {\n            console.log('📧 Sending job rescheduled emails via Klaviyo');\n            // Send customer notification\n            await KlaviyoService.sendJobRescheduledCustomer(data);\n            // Send admin notification\n            await KlaviyoService.sendJobRescheduledAdmin(data);\n            console.log('✅ Klaviyo: Job rescheduled emails sent to both customer and admin');\n        } catch (error) {\n            console.error('❌ Klaviyo: Failed to send job rescheduled emails:', error);\n            throw error;\n        }\n    }\n    // Send quote email (general communication)\n    static async sendQuoteEmail(data) {\n        try {\n            console.log('📧 Sending quote email via Klaviyo');\n            const uniqueEventId = `quote_email_${data.quote_id}_${Date.now()}`;\n            const payload = {\n                data: {\n                    type: 'event',\n                    attributes: {\n                        properties: {\n                            ...data,\n                            source: 'windscreen-compare-website',\n                            email_type: 'quote_communication',\n                            priority: 'normal',\n                            unique_event_id: uniqueEventId,\n                            timestamp_ms: Date.now(),\n                            event_uuid: `quote-email-${data.quote_id}-${Date.now()}`\n                        },\n                        metric: {\n                            data: {\n                                type: 'metric',\n                                attributes: {\n                                    name: 'Customer_Quote_Completed'\n                                }\n                            }\n                        },\n                        profile: {\n                            data: {\n                                type: 'profile',\n                                attributes: {\n                                    email: data.customer_email,\n                                    properties: {\n                                        first_name: data.customer_name?.split(' ')[0] || '',\n                                        last_name: data.customer_name?.split(' ').slice(1).join(' ') || '',\n                                        phone_number: data.customer_phone,\n                                        vehicle_registration: data.vehicle_registration,\n                                        latest_quote_id: data.quote_id\n                                    }\n                                }\n                            }\n                        },\n                        time: new Date().toISOString(),\n                        unique_id: uniqueEventId\n                    }\n                }\n            };\n            await KlaviyoService.makeAPICall('/events/', payload);\n            // Also send admin notification\n            const adminEmail = process.env.ADMIN_EMAIL || 'admin@windscreencompare.com';\n            const adminUniqueId = `quote_email_admin_${data.quote_id}_${Date.now()}`;\n            const adminPayload = {\n                data: {\n                    type: 'event',\n                    attributes: {\n                        properties: {\n                            ...data,\n                            source: 'windscreen-compare-website',\n                            email_type: 'quote_communication_admin',\n                            priority: 'normal',\n                            unique_event_id: adminUniqueId,\n                            timestamp_ms: Date.now(),\n                            event_uuid: `quote-email-admin-${data.quote_id}-${Date.now()}`\n                        },\n                        metric: {\n                            data: {\n                                type: 'metric',\n                                attributes: {\n                                    name: 'Admin_Quote_Completed'\n                                }\n                            }\n                        },\n                        profile: {\n                            data: {\n                                type: 'profile',\n                                attributes: {\n                                    email: adminEmail,\n                                    properties: {\n                                        role: 'admin'\n                                    }\n                                }\n                            }\n                        },\n                        time: new Date().toISOString(),\n                        unique_id: adminUniqueId\n                    }\n                }\n            };\n            await KlaviyoService.makeAPICall('/events/', adminPayload);\n            console.log('✅ Klaviyo: Quote email sent');\n        } catch (error) {\n            console.error('❌ Klaviyo: Failed to send quote email:', error);\n            throw error;\n        }\n    }\n    // Send job scheduled notification to customer\n    static async sendJobScheduledCustomer(data) {\n        const uniqueEventId = `job_scheduled_customer_${data.quote_id}_${Date.now()}`;\n        const payload = {\n            data: {\n                type: 'event',\n                attributes: {\n                    properties: {\n                        ...data,\n                        source: 'windscreen-compare-website',\n                        email_type: 'job_scheduled_customer',\n                        priority: 'high',\n                        unique_event_id: uniqueEventId,\n                        timestamp_ms: Date.now(),\n                        event_uuid: `job-scheduled-customer-${data.quote_id}-${Date.now()}`\n                    },\n                    metric: {\n                        data: {\n                            type: 'metric',\n                            attributes: {\n                                name: 'Scheduled_Job'\n                            }\n                        }\n                    },\n                    profile: {\n                        data: {\n                            type: 'profile',\n                            attributes: {\n                                email: data.customer_email,\n                                properties: {\n                                    first_name: data.customer_name?.split(' ')[0] || '',\n                                    last_name: data.customer_name?.split(' ').slice(1).join(' ') || '',\n                                    phone_number: data.customer_phone,\n                                    vehicle_registration: data.vehicle_registration,\n                                    latest_quote_id: data.quote_id,\n                                    scheduled_date: data.scheduled_date,\n                                    scheduled_time: data.scheduled_time\n                                }\n                            }\n                        }\n                    },\n                    time: new Date().toISOString(),\n                    unique_id: uniqueEventId\n                }\n            }\n        };\n        await KlaviyoService.makeAPICall('/events/', payload);\n    }\n    // Send job scheduled notification to admin\n    static async sendJobScheduledAdmin(data) {\n        const adminEmail = process.env.ADMIN_EMAIL || 'admin@windscreencompare.com';\n        const uniqueEventId = `job_scheduled_admin_${data.quote_id}_${Date.now()}`;\n        const payload = {\n            data: {\n                type: 'event',\n                attributes: {\n                    properties: {\n                        ...data,\n                        source: 'windscreen-compare-website',\n                        email_type: 'job_scheduled_admin',\n                        priority: 'high',\n                        unique_event_id: uniqueEventId,\n                        timestamp_ms: Date.now(),\n                        event_uuid: `job-scheduled-admin-${data.quote_id}-${Date.now()}`\n                    },\n                    metric: {\n                        data: {\n                            type: 'metric',\n                            attributes: {\n                                name: 'Scheduled_Job'\n                            }\n                        }\n                    },\n                    profile: {\n                        data: {\n                            type: 'profile',\n                            attributes: {\n                                email: adminEmail,\n                                properties: {\n                                    role: 'admin'\n                                }\n                            }\n                        }\n                    },\n                    time: new Date().toISOString(),\n                    unique_id: uniqueEventId\n                }\n            }\n        };\n        await KlaviyoService.makeAPICall('/events/', payload);\n    }\n    // Send job rescheduled notification to customer\n    static async sendJobRescheduledCustomer(data) {\n        const uniqueEventId = `job_rescheduled_customer_${data.quote_id}_${Date.now()}`;\n        const payload = {\n            data: {\n                type: 'event',\n                attributes: {\n                    properties: {\n                        ...data,\n                        source: 'windscreen-compare-website',\n                        email_type: 'job_rescheduled_customer',\n                        priority: 'high',\n                        unique_event_id: uniqueEventId,\n                        timestamp_ms: Date.now(),\n                        event_uuid: `job-rescheduled-customer-${data.quote_id}-${Date.now()}`\n                    },\n                    metric: {\n                        data: {\n                            type: 'metric',\n                            attributes: {\n                                name: 'Rescheduled_Job'\n                            }\n                        }\n                    },\n                    profile: {\n                        data: {\n                            type: 'profile',\n                            attributes: {\n                                email: data.customer_email,\n                                properties: {\n                                    first_name: data.customer_name?.split(' ')[0] || '',\n                                    last_name: data.customer_name?.split(' ').slice(1).join(' ') || '',\n                                    phone_number: data.customer_phone,\n                                    vehicle_registration: data.vehicle_registration,\n                                    latest_quote_id: data.quote_id,\n                                    scheduled_date: data.scheduled_date,\n                                    scheduled_time: data.scheduled_time,\n                                    previous_date: data.previous_date,\n                                    previous_time: data.previous_time\n                                }\n                            }\n                        }\n                    },\n                    time: new Date().toISOString(),\n                    unique_id: uniqueEventId\n                }\n            }\n        };\n        await KlaviyoService.makeAPICall('/events/', payload);\n    }\n    // Send job rescheduled notification to admin\n    static async sendJobRescheduledAdmin(data) {\n        const adminEmail = process.env.ADMIN_EMAIL || 'admin@windscreencompare.com';\n        const uniqueEventId = `job_rescheduled_admin_${data.quote_id}_${Date.now()}`;\n        const payload = {\n            data: {\n                type: 'event',\n                attributes: {\n                    properties: {\n                        ...data,\n                        source: 'windscreen-compare-website',\n                        email_type: 'job_rescheduled_admin',\n                        priority: 'high',\n                        unique_event_id: uniqueEventId,\n                        timestamp_ms: Date.now(),\n                        event_uuid: `job-rescheduled-admin-${data.quote_id}-${Date.now()}`\n                    },\n                    metric: {\n                        data: {\n                            type: 'metric',\n                            attributes: {\n                                name: 'Rescheduled_Job'\n                            }\n                        }\n                    },\n                    profile: {\n                        data: {\n                            type: 'profile',\n                            attributes: {\n                                email: adminEmail,\n                                properties: {\n                                    role: 'admin'\n                                }\n                            }\n                        }\n                    },\n                    time: new Date().toISOString(),\n                    unique_id: uniqueEventId\n                }\n            }\n        };\n        await KlaviyoService.makeAPICall('/events/', payload);\n    }\n    // Helper method to make API calls\n    static async makeAPICall(endpoint, payload) {\n        if (!KlaviyoService.PRIVATE_KEY) {\n            console.warn('⚠️ Klaviyo: Private API key not configured');\n            return;\n        }\n        console.log('📤 Making Klaviyo API call to:', endpoint);\n        console.log('📋 Payload:', JSON.stringify(payload, null, 2));\n        const response = await fetch(`${KlaviyoService.API_BASE}${endpoint}`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Klaviyo-API-Key ${KlaviyoService.PRIVATE_KEY}`,\n                'Content-Type': 'application/json',\n                'revision': '2024-10-15'\n            },\n            body: JSON.stringify(payload)\n        });\n        console.log('📡 Klaviyo response status:', response.status);\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error('❌ Klaviyo API error response:', errorText);\n            throw new Error(`Klaviyo API error: ${response.status} - ${errorText}`);\n        }\n        // Handle empty responses (common for successful events)\n        const responseText = await response.text();\n        console.log('📄 Klaviyo response text:', responseText);\n        if (!responseText || responseText.trim() === '') {\n            console.log('✅ Empty response from Klaviyo (likely successful)');\n            return {};\n        }\n        try {\n            return JSON.parse(responseText);\n        } catch (parseError) {\n            console.warn('⚠️ Failed to parse Klaviyo response as JSON:', responseText);\n            return {};\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (KlaviyoService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/klaviyo.ts\n");

/***/ }),

/***/ "(api)/./pages/api/track-quote-started.ts":
/*!******************************************!*\
  !*** ./pages/api/track-quote-started.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_klaviyo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/klaviyo */ \"(api)/./lib/klaviyo.ts\");\n\nasync function handler(req, res) {\n    // Add debug logging\n    console.log('🚀 Track quote started API called');\n    console.log('📋 Request body:', req.body);\n    console.log('🔑 Klaviyo key exists:', !!process.env.KLAVIYO_PRIVATE_API_KEY);\n    console.log('📧 Admin email:', process.env.ADMIN_EMAIL);\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            message: 'Method not allowed'\n        });\n    }\n    try {\n        const { vehicleReg, quoteId, userEmail, userPhone } = req.body;\n        // Basic validation - make sure we have the essentials\n        if (!vehicleReg || !quoteId) {\n            return res.status(400).json({\n                message: 'Vehicle registration and quote ID are required',\n                received: {\n                    vehicleReg: !!vehicleReg,\n                    quoteId: !!quoteId\n                }\n            });\n        }\n        // Get user agent and IP for tracking (optional)\n        const userAgent = req.headers['user-agent'] || 'Unknown';\n        const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress || 'Unknown';\n        // console.log('Quote started tracking request:', { vehicleReg, quoteId, userAgent, ip }); // debug\n        console.log('📤 Sending to Klaviyo...');\n        // Track the quote start event\n        await _lib_klaviyo__WEBPACK_IMPORTED_MODULE_0__[\"default\"].trackQuoteStarted({\n            vehicleReg,\n            quoteId,\n            userEmail,\n            userPhone,\n            timestamp: new Date().toISOString(),\n            userAgent,\n            ipAddress: Array.isArray(ip) ? ip[0] : ip\n        });\n        console.log('✅ Successfully sent to Klaviyo');\n        return res.status(200).json({\n            success: true,\n            message: 'Quote started event tracked successfully',\n            quoteId\n        });\n    } catch (error) {\n        console.error('Error tracking quote started event:', error);\n        // Don't fail the user flow if tracking fails\n        return res.status(200).json({\n            success: false,\n            message: 'Tracking failed but continuing...',\n            error: error instanceof Error ? error.message : 'Unknown error'\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvdHJhY2stcXVvdGUtc3RhcnRlZC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUMrQztBQUVoQyxlQUFlQyxRQUFRQyxHQUFtQixFQUFFQyxHQUFvQjtJQUM3RSxvQkFBb0I7SUFDcEJDLFFBQVFDLEdBQUcsQ0FBQztJQUNaRCxRQUFRQyxHQUFHLENBQUMsb0JBQW9CSCxJQUFJSSxJQUFJO0lBQ3hDRixRQUFRQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQ0UsUUFBUUMsR0FBRyxDQUFDQyx1QkFBdUI7SUFDM0VMLFFBQVFDLEdBQUcsQ0FBQyxtQkFBbUJFLFFBQVFDLEdBQUcsQ0FBQ0UsV0FBVztJQUV0RCxJQUFJUixJQUFJUyxNQUFNLEtBQUssUUFBUTtRQUN6QixPQUFPUixJQUFJUyxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQUVDLFNBQVM7UUFBcUI7SUFDOUQ7SUFFQSxJQUFJO1FBQ0YsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLE9BQU8sRUFBRUMsU0FBUyxFQUFFQyxTQUFTLEVBQUUsR0FBR2hCLElBQUlJLElBQUk7UUFFOUQsc0RBQXNEO1FBQ3RELElBQUksQ0FBQ1MsY0FBYyxDQUFDQyxTQUFTO1lBQzNCLE9BQU9iLElBQUlTLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7Z0JBQzFCQyxTQUFTO2dCQUNUSyxVQUFVO29CQUFFSixZQUFZLENBQUMsQ0FBQ0E7b0JBQVlDLFNBQVMsQ0FBQyxDQUFDQTtnQkFBUTtZQUMzRDtRQUNGO1FBRUEsZ0RBQWdEO1FBQ2hELE1BQU1JLFlBQVlsQixJQUFJbUIsT0FBTyxDQUFDLGFBQWEsSUFBSTtRQUMvQyxNQUFNQyxLQUFLcEIsSUFBSW1CLE9BQU8sQ0FBQyxrQkFBa0IsSUFBSW5CLElBQUlxQixVQUFVLENBQUNDLGFBQWEsSUFBSTtRQUU3RSxtR0FBbUc7UUFFbkdwQixRQUFRQyxHQUFHLENBQUM7UUFFWiw4QkFBOEI7UUFDOUIsTUFBTUwsc0VBQWdDLENBQUM7WUFDckNlO1lBQ0FDO1lBQ0FDO1lBQ0FDO1lBQ0FRLFdBQVcsSUFBSUMsT0FBT0MsV0FBVztZQUNqQ1I7WUFDQVMsV0FBV0MsTUFBTUMsT0FBTyxDQUFDVCxNQUFNQSxFQUFFLENBQUMsRUFBRSxHQUFHQTtRQUN6QztRQUVBbEIsUUFBUUMsR0FBRyxDQUFDO1FBRVosT0FBT0YsSUFBSVMsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUMxQm1CLFNBQVM7WUFDVGxCLFNBQVM7WUFDVEU7UUFDRjtJQUNGLEVBQUUsT0FBT2lCLE9BQU87UUFDZDdCLFFBQVE2QixLQUFLLENBQUMsdUNBQXVDQTtRQUVyRCw2Q0FBNkM7UUFDN0MsT0FBTzlCLElBQUlTLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFDMUJtQixTQUFTO1lBQ1RsQixTQUFTO1lBQ1RtQixPQUFPQSxpQkFBaUJDLFFBQVFELE1BQU1uQixPQUFPLEdBQUc7UUFDbEQ7SUFDRjtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbXVoYW1tYWRhbGkvRGVza3RvcC9XaW5kc2NyZWVuQ29tcGFyZS9HSVRIVUJyZXBvL1dJTkN1c3RvbWVyL3BhZ2VzL2FwaS90cmFjay1xdW90ZS1zdGFydGVkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gJ25leHQnO1xuaW1wb3J0IEtsYXZpeW9TZXJ2aWNlIGZyb20gJy4uLy4uL2xpYi9rbGF2aXlvJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihyZXE6IE5leHRBcGlSZXF1ZXN0LCByZXM6IE5leHRBcGlSZXNwb25zZSkge1xuICAvLyBBZGQgZGVidWcgbG9nZ2luZ1xuICBjb25zb2xlLmxvZygn8J+agCBUcmFjayBxdW90ZSBzdGFydGVkIEFQSSBjYWxsZWQnKTtcbiAgY29uc29sZS5sb2coJ/Cfk4sgUmVxdWVzdCBib2R5OicsIHJlcS5ib2R5KTtcbiAgY29uc29sZS5sb2coJ/CflJEgS2xhdml5byBrZXkgZXhpc3RzOicsICEhcHJvY2Vzcy5lbnYuS0xBVklZT19QUklWQVRFX0FQSV9LRVkpO1xuICBjb25zb2xlLmxvZygn8J+TpyBBZG1pbiBlbWFpbDonLCBwcm9jZXNzLmVudi5BRE1JTl9FTUFJTCk7XG5cbiAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwNSkuanNvbih7IG1lc3NhZ2U6ICdNZXRob2Qgbm90IGFsbG93ZWQnIH0pO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IHZlaGljbGVSZWcsIHF1b3RlSWQsIHVzZXJFbWFpbCwgdXNlclBob25lIH0gPSByZXEuYm9keTtcbiAgICBcbiAgICAvLyBCYXNpYyB2YWxpZGF0aW9uIC0gbWFrZSBzdXJlIHdlIGhhdmUgdGhlIGVzc2VudGlhbHNcbiAgICBpZiAoIXZlaGljbGVSZWcgfHwgIXF1b3RlSWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IFxuICAgICAgICBtZXNzYWdlOiAnVmVoaWNsZSByZWdpc3RyYXRpb24gYW5kIHF1b3RlIElEIGFyZSByZXF1aXJlZCcsXG4gICAgICAgIHJlY2VpdmVkOiB7IHZlaGljbGVSZWc6ICEhdmVoaWNsZVJlZywgcXVvdGVJZDogISFxdW90ZUlkIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEdldCB1c2VyIGFnZW50IGFuZCBJUCBmb3IgdHJhY2tpbmcgKG9wdGlvbmFsKVxuICAgIGNvbnN0IHVzZXJBZ2VudCA9IHJlcS5oZWFkZXJzWyd1c2VyLWFnZW50J10gfHwgJ1Vua25vd24nO1xuICAgIGNvbnN0IGlwID0gcmVxLmhlYWRlcnNbJ3gtZm9yd2FyZGVkLWZvciddIHx8IHJlcS5jb25uZWN0aW9uLnJlbW90ZUFkZHJlc3MgfHwgJ1Vua25vd24nO1xuICAgIFxuICAgIC8vIGNvbnNvbGUubG9nKCdRdW90ZSBzdGFydGVkIHRyYWNraW5nIHJlcXVlc3Q6JywgeyB2ZWhpY2xlUmVnLCBxdW90ZUlkLCB1c2VyQWdlbnQsIGlwIH0pOyAvLyBkZWJ1Z1xuXG4gICAgY29uc29sZS5sb2coJ/Cfk6QgU2VuZGluZyB0byBLbGF2aXlvLi4uJyk7XG4gICAgXG4gICAgLy8gVHJhY2sgdGhlIHF1b3RlIHN0YXJ0IGV2ZW50XG4gICAgYXdhaXQgS2xhdml5b1NlcnZpY2UudHJhY2tRdW90ZVN0YXJ0ZWQoe1xuICAgICAgdmVoaWNsZVJlZyxcbiAgICAgIHF1b3RlSWQsXG4gICAgICB1c2VyRW1haWwsXG4gICAgICB1c2VyUGhvbmUsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIHVzZXJBZ2VudCxcbiAgICAgIGlwQWRkcmVzczogQXJyYXkuaXNBcnJheShpcCkgPyBpcFswXSA6IGlwLCAvLyBoYW5kbGUgZm9yd2FyZGVkIElQc1xuICAgIH0pO1xuXG4gICAgY29uc29sZS5sb2coJ+KchSBTdWNjZXNzZnVsbHkgc2VudCB0byBLbGF2aXlvJyk7XG5cbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6ICdRdW90ZSBzdGFydGVkIGV2ZW50IHRyYWNrZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgIHF1b3RlSWRcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciB0cmFja2luZyBxdW90ZSBzdGFydGVkIGV2ZW50OicsIGVycm9yKTtcbiAgICBcbiAgICAvLyBEb24ndCBmYWlsIHRoZSB1c2VyIGZsb3cgaWYgdHJhY2tpbmcgZmFpbHNcbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBtZXNzYWdlOiAnVHJhY2tpbmcgZmFpbGVkIGJ1dCBjb250aW51aW5nLi4uJyxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgIH0pO1xuICB9XG59ICJdLCJuYW1lcyI6WyJLbGF2aXlvU2VydmljZSIsImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJjb25zb2xlIiwibG9nIiwiYm9keSIsInByb2Nlc3MiLCJlbnYiLCJLTEFWSVlPX1BSSVZBVEVfQVBJX0tFWSIsIkFETUlOX0VNQUlMIiwibWV0aG9kIiwic3RhdHVzIiwianNvbiIsIm1lc3NhZ2UiLCJ2ZWhpY2xlUmVnIiwicXVvdGVJZCIsInVzZXJFbWFpbCIsInVzZXJQaG9uZSIsInJlY2VpdmVkIiwidXNlckFnZW50IiwiaGVhZGVycyIsImlwIiwiY29ubmVjdGlvbiIsInJlbW90ZUFkZHJlc3MiLCJ0cmFja1F1b3RlU3RhcnRlZCIsInRpbWVzdGFtcCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImlwQWRkcmVzcyIsIkFycmF5IiwiaXNBcnJheSIsInN1Y2Nlc3MiLCJlcnJvciIsIkVycm9yIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/track-quote-started.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftrack-quote-started&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ftrack-quote-started.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();