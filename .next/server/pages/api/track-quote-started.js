"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/track-quote-started";
exports.ids = ["pages/api/track-quote-started"];
exports.modules = {

/***/ "klaviyo-api":
/*!******************************!*\
  !*** external "klaviyo-api" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("klaviyo-api");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftrack-quote-started&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ftrack-quote-started.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftrack-quote-started&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ftrack-quote-started.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_track_quote_started_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/track-quote-started.ts */ \"(api)/./pages/api/track-quote-started.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_track_quote_started_ts__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_track_quote_started_ts__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/track-quote-started\",\n        pathname: \"/api/track-quote-started\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_track_quote_started_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnRyYWNrLXF1b3RlLXN0YXJ0ZWQmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRnRyYWNrLXF1b3RlLXN0YXJ0ZWQudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDK0Q7QUFDL0Q7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLDhEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyw4REFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzL2FwaS90cmFjay1xdW90ZS1zdGFydGVkLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS90cmFjay1xdW90ZS1zdGFydGVkXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdHJhY2stcXVvdGUtc3RhcnRlZFwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftrack-quote-started&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ftrack-quote-started.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/klaviyo.ts":
/*!************************!*\
  !*** ./lib/klaviyo.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KlaviyoService: () => (/* binding */ KlaviyoService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var klaviyo_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! klaviyo-api */ \"klaviyo-api\");\n/* harmony import */ var klaviyo_api__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(klaviyo_api__WEBPACK_IMPORTED_MODULE_0__);\n\n// Initialize Klaviyo with your private API key\nconst session = new klaviyo_api__WEBPACK_IMPORTED_MODULE_0__.ApiKeySession(process.env.KLAVIYO_PRIVATE_API_KEY || '');\nconst eventsApi = new klaviyo_api__WEBPACK_IMPORTED_MODULE_0__.EventsApi(session);\nconst profilesApi = new klaviyo_api__WEBPACK_IMPORTED_MODULE_0__.ProfilesApi(session);\nclass KlaviyoService {\n    static{\n        this.API_BASE = 'https://a.klaviyo.com/api';\n    }\n    static{\n        this.PRIVATE_KEY = process.env.KLAVIYO_PRIVATE_API_KEY;\n    }\n    // Track when a user starts a quote (optional tracking)\n    static async trackQuoteStarted(data) {\n        try {\n            console.log('📊 Tracking quote started for:', data.quoteId);\n            // This is optional tracking - if it fails, don't break the flow\n            const payload = {\n                data: {\n                    type: 'event',\n                    attributes: {\n                        properties: {\n                            vehicle_registration: data.vehicleReg,\n                            quote_id: data.quoteId,\n                            timestamp: data.timestamp,\n                            user_agent: data.userAgent,\n                            ip_address: data.ipAddress,\n                            source: 'windscreen-compare-website',\n                            event_type: 'quote_started'\n                        },\n                        metric: {\n                            data: {\n                                type: 'metric',\n                                attributes: {\n                                    name: 'Quote Started'\n                                }\n                            }\n                        },\n                        profile: {\n                            data: {\n                                type: 'profile',\n                                attributes: {\n                                    email: data.userEmail || `quote-${data.quoteId}@temp.local`,\n                                    properties: {\n                                        phone_number: data.userPhone || '',\n                                        latest_quote_id: data.quoteId,\n                                        latest_vehicle_reg: data.vehicleReg\n                                    }\n                                }\n                            }\n                        },\n                        time: new Date().toISOString()\n                    }\n                }\n            };\n            await KlaviyoService.makeAPICall('/events/', payload);\n            console.log('✅ Quote started tracking successful');\n        } catch (error) {\n            console.warn('⚠️ Quote started tracking failed (non-critical):', error);\n        // Don't throw error - this is optional tracking\n        }\n    }\n    // Track when a user completes the quote (submits contact info)\n    // This only sends the admin notification - no customer tracking\n    static async trackQuoteCompleted(data) {\n        try {\n            console.log('📧 Sending admin notification for quote completed');\n            // Use the new sendAdminOrderNotification with enhanced data instead of basic sendAdminNotification\n            await KlaviyoService.sendAdminOrderNotification({\n                // Order information\n                quote_id: data.quoteId,\n                order_date: data.timestamp,\n                // Customer information  \n                user_name: data.userName,\n                user_email: data.userEmail,\n                user_phone: data.userPhone,\n                user_location: data.userLocation || 'Not provided',\n                // Vehicle information\n                vehicle_registration: data.vehicleReg,\n                // Note: Make/model/year not available in quote data, would need to be fetched\n                vehicle_make: data.vehicleMake || 'To be confirmed',\n                vehicle_model: data.vehicleModel || 'To be confirmed',\n                vehicle_year: data.vehicleYear || 'To be confirmed',\n                // Service details\n                glass_type: data.glassType,\n                damage_type: data.selectedWindows.join(', '),\n                special_requirements: data.specifications.join(', ') || 'None',\n                // Pricing information\n                total_price: data.quotePrice ? new Intl.NumberFormat('en-GB', {\n                    style: 'currency',\n                    currency: 'GBP'\n                }).format(data.quotePrice) : 'Quote pending',\n                // These will be filled in when payment is processed\n                glass_price: 'TBD at payment',\n                fitting_price: 'TBD at payment',\n                vat_amount: 'TBD at payment',\n                payment_method: 'Not yet paid',\n                payment_type: 'Not yet paid',\n                payment_status: 'QUOTE_COMPLETED',\n                // Appointment details from contact form\n                preferred_date: data.appointmentDate || 'TBD',\n                preferred_time: data.appointmentTime || 'TBD',\n                appointment_type: 'mobile'\n            });\n            console.log('✅ Klaviyo: Admin notification sent');\n        } catch (error) {\n            console.error('❌ Klaviyo: Failed to send admin notification:', error);\n        }\n    }\n    // Send admin notification email via Klaviyo\n    static async sendAdminNotification(data) {\n        try {\n            const adminEmail = process.env.ADMIN_EMAIL || 'admin@windscreencompare.com';\n            // Generate unique event ID to prevent email chaining for admin notifications\n            const uniqueEventId = `admin_notification_${data.quote_id || data.quoteId}_${Date.now()}`;\n            const payload = {\n                data: {\n                    type: 'event',\n                    attributes: {\n                        properties: {\n                            // Main event data\n                            vehicle_registration: data.vehicle_registration || data.vehicleReg,\n                            quote_id: data.quote_id || data.quoteId,\n                            timestamp: data.timestamp,\n                            user_email: data.user_email || 'Not provided',\n                            user_phone: data.user_phone || 'Not provided',\n                            user_location: data.user_location || 'Not provided',\n                            source: 'windscreen-compare-website',\n                            // Admin notification specific properties\n                            notification_type: 'admin_alert',\n                            priority: 'high',\n                            alert_type: 'quote_completed',\n                            dashboard_url: `${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/admin/quotes`,\n                            formatted_timestamp: new Date().toLocaleString('en-GB', {\n                                day: '2-digit',\n                                month: '2-digit',\n                                year: 'numeric',\n                                hour: '2-digit',\n                                minute: '2-digit'\n                            }),\n                            notification_title: 'Quote Completed',\n                            action_required: 'Contact customer within 24 hours',\n                            estimated_revenue: data.quote_price,\n                            // Quote completion properties\n                            user_name: data.user_name,\n                            quote_price: data.quote_price,\n                            glass_type: data.glass_type,\n                            selected_windows: data.selected_windows,\n                            customer_priority: 'high',\n                            // Add unique identifiers to prevent email chaining\n                            unique_event_id: uniqueEventId,\n                            timestamp_ms: Date.now(),\n                            event_uuid: `admin-${data.quote_id || data.quoteId}-${Date.now()}`\n                        },\n                        metric: {\n                            data: {\n                                type: 'metric',\n                                attributes: {\n                                    name: 'Admin: Quote Completed'\n                                }\n                            }\n                        },\n                        profile: {\n                            data: {\n                                type: 'profile',\n                                attributes: {\n                                    email: adminEmail,\n                                    properties: {\n                                        role: 'admin'\n                                    }\n                                }\n                            }\n                        },\n                        time: new Date().toISOString(),\n                        // Add unique external ID to prevent event deduplication\n                        unique_id: uniqueEventId\n                    }\n                }\n            };\n            await KlaviyoService.makeAPICall('/events/', payload);\n            console.log('✅ Klaviyo: Admin notification sent');\n        } catch (error) {\n            console.error('❌ Klaviyo: Failed to send admin notification:', error);\n        }\n    }\n    // Send admin order notification email for completed orders with payment\n    static async sendAdminOrderNotification(data) {\n        try {\n            console.log('📧 Sending admin ORDER notification with data:', {\n                preferred_date: data.preferred_date || data.appointment_date,\n                preferred_time: data.preferred_time || data.appointment_time,\n                vehicle_make: data.vehicle_make,\n                vehicle_model: data.vehicle_model,\n                glass_price: data.glass_price || data.materials_cost,\n                fitting_price: data.fitting_price || data.labor_cost,\n                payment_method: data.payment_method,\n                payment_type: data.payment_type\n            });\n            const adminEmail = process.env.ADMIN_EMAIL || 'admin@windscreencompare.com';\n            // Generate unique event ID to prevent email chaining for admin notifications\n            const uniqueEventId = `admin_order_notification_${data.quote_id || data.order_id}_${Date.now()}`;\n            const payload = {\n                data: {\n                    type: 'event',\n                    attributes: {\n                        properties: {\n                            // Order Information\n                            order_id: data.order_id || data.quote_id,\n                            quote_id: data.quote_id,\n                            order_date: data.order_date || new Date().toISOString(),\n                            booking_reference: data.booking_reference,\n                            // Preferred Appointment (these were missing!)\n                            preferred_date: data.preferred_date || data.appointment_date,\n                            preferred_time: data.preferred_time || data.appointment_time,\n                            appointment_type: data.appointment_type,\n                            // Customer Information\n                            user_name: data.user_name || data.customer_name,\n                            user_email: data.user_email || data.customer_email,\n                            user_phone: data.user_phone || data.customer_phone,\n                            user_location: data.user_location || data.customer_address,\n                            // Vehicle Information (these were missing!)\n                            vehicle_registration: data.vehicle_registration,\n                            vehicle_make: data.vehicle_make,\n                            vehicle_model: data.vehicle_model,\n                            vehicle_year: data.vehicle_year,\n                            // Service Details\n                            glass_type: data.glass_type,\n                            damage_type: data.damage_type || data.selected_windows,\n                            special_requirements: data.special_requirements || 'None',\n                            // Payment Information (these were missing!)\n                            glass_price: data.glass_price || data.materials_cost,\n                            fitting_price: data.fitting_price || data.labor_cost,\n                            vat_amount: data.vat_amount,\n                            total_price: data.total_price || data.total_amount,\n                            payment_status: data.payment_status || 'COMPLETED',\n                            payment_method: data.payment_method,\n                            payment_type: data.payment_type,\n                            stripe_payment_id: data.stripe_payment_id || data.payment_intent_id,\n                            // Admin notification specific properties\n                            notification_type: 'admin_alert',\n                            priority: 'high',\n                            alert_type: 'order_completed',\n                            dashboard_url: `${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/admin/orders`,\n                            crm_base_url: process.env.CRM_BASE_URL || 'https://your-crm-system.com',\n                            formatted_timestamp: new Date().toLocaleString('en-GB', {\n                                day: '2-digit',\n                                month: '2-digit',\n                                year: 'numeric',\n                                hour: '2-digit',\n                                minute: '2-digit'\n                            }),\n                            notification_title: 'Order Completed',\n                            action_required: 'Assign technician and confirm appointment',\n                            source: 'windscreen-compare-website',\n                            // Add unique identifiers to prevent email chaining\n                            unique_event_id: uniqueEventId,\n                            timestamp_ms: Date.now(),\n                            event_uuid: `admin-order-${data.quote_id || data.order_id}-${Date.now()}`\n                        },\n                        metric: {\n                            data: {\n                                type: 'metric',\n                                attributes: {\n                                    name: 'Admin: Quote Completed'\n                                }\n                            }\n                        },\n                        profile: {\n                            data: {\n                                type: 'profile',\n                                attributes: {\n                                    email: adminEmail,\n                                    properties: {\n                                        role: 'admin'\n                                    }\n                                }\n                            }\n                        },\n                        time: new Date().toISOString(),\n                        // Add unique external ID to prevent event deduplication\n                        unique_id: uniqueEventId\n                    }\n                }\n            };\n            await KlaviyoService.makeAPICall('/events/', payload);\n            console.log('✅ Klaviyo: Admin order notification sent');\n        } catch (error) {\n            console.error('❌ Klaviyo: Failed to send admin order notification:', error);\n        }\n    }\n    // Send payment receipt email to customer\n    static async sendPaymentReceipt(data) {\n        try {\n            console.log('📧 Sending payment receipt email via Klaviyo');\n            // Generate unique event ID to prevent email chaining\n            const uniqueEventId = `payment_receipt_${data.quote_id}_${data.payment_intent_id}_${Date.now()}`;\n            const payload = {\n                data: {\n                    type: 'event',\n                    attributes: {\n                        properties: {\n                            ...data,\n                            source: 'windscreen-compare-website',\n                            email_type: 'payment_receipt',\n                            priority: 'high',\n                            // Add unique identifiers to prevent email chaining\n                            unique_event_id: uniqueEventId,\n                            payment_intent_id: data.payment_intent_id,\n                            timestamp_ms: Date.now(),\n                            event_uuid: `receipt-${data.quote_id}-${Date.now()}`\n                        },\n                        metric: {\n                            data: {\n                                type: 'metric',\n                                attributes: {\n                                    name: 'Payment Receipt'\n                                }\n                            }\n                        },\n                        profile: {\n                            data: {\n                                type: 'profile',\n                                attributes: {\n                                    email: data.customer_email,\n                                    properties: {\n                                        first_name: data.customer_name?.split(' ')[0] || '',\n                                        last_name: data.customer_name?.split(' ').slice(1).join(' ') || '',\n                                        phone_number: data.customer_phone,\n                                        vehicle_registration: data.vehicle_registration,\n                                        latest_quote_id: data.quote_id,\n                                        latest_booking_reference: data.booking_reference\n                                    }\n                                }\n                            }\n                        },\n                        time: new Date().toISOString(),\n                        // Add unique external ID to prevent event deduplication\n                        unique_id: uniqueEventId\n                    }\n                }\n            };\n            await KlaviyoService.makeAPICall('/events/', payload);\n            console.log('✅ Klaviyo: Payment receipt email sent');\n        } catch (error) {\n            console.error('❌ Klaviyo: Failed to send payment receipt:', error);\n            throw error;\n        }\n    }\n    // Send order confirmation email with service details\n    static async sendOrderConfirmation(data) {\n        try {\n            console.log('📧 Sending order confirmation email via Klaviyo');\n            // Generate unique event ID to prevent email chaining\n            const uniqueEventId = `order_confirmation_${data.quote_id}_${data.booking_reference}_${Date.now()}`;\n            const payload = {\n                data: {\n                    type: 'event',\n                    attributes: {\n                        properties: {\n                            ...data,\n                            source: 'windscreen-compare-website',\n                            email_type: 'order_confirmation',\n                            priority: 'high',\n                            // Add unique identifiers to prevent email chaining\n                            unique_event_id: uniqueEventId,\n                            booking_reference: data.booking_reference,\n                            timestamp_ms: Date.now(),\n                            event_uuid: `order-${data.quote_id}-${Date.now()}`\n                        },\n                        metric: {\n                            data: {\n                                type: 'metric',\n                                attributes: {\n                                    name: 'Order Confirmation'\n                                }\n                            }\n                        },\n                        profile: {\n                            data: {\n                                type: 'profile',\n                                attributes: {\n                                    email: data.customer_email,\n                                    properties: {\n                                        first_name: data.customer_name?.split(' ')[0] || '',\n                                        last_name: data.customer_name?.split(' ').slice(1).join(' ') || '',\n                                        phone_number: data.customer_phone,\n                                        vehicle_registration: data.vehicle_registration,\n                                        latest_quote_id: data.quote_id,\n                                        latest_booking_reference: data.booking_reference,\n                                        appointment_date: data.appointment_date,\n                                        appointment_time: data.appointment_time\n                                    }\n                                }\n                            }\n                        },\n                        time: new Date().toISOString(),\n                        // Add unique external ID to prevent event deduplication\n                        unique_id: uniqueEventId\n                    }\n                }\n            };\n            await KlaviyoService.makeAPICall('/events/', payload);\n            console.log('✅ Klaviyo: Order confirmation email sent');\n        } catch (error) {\n            console.error('❌ Klaviyo: Failed to send order confirmation:', error);\n            throw error;\n        }\n    }\n    // Helper method to make API calls\n    static async makeAPICall(endpoint, payload) {\n        if (!KlaviyoService.PRIVATE_KEY) {\n            console.warn('⚠️ Klaviyo: Private API key not configured');\n            return;\n        }\n        console.log('📤 Making Klaviyo API call to:', endpoint);\n        console.log('📋 Payload:', JSON.stringify(payload, null, 2));\n        const response = await fetch(`${KlaviyoService.API_BASE}${endpoint}`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Klaviyo-API-Key ${KlaviyoService.PRIVATE_KEY}`,\n                'Content-Type': 'application/json',\n                'revision': '2024-10-15'\n            },\n            body: JSON.stringify(payload)\n        });\n        console.log('📡 Klaviyo response status:', response.status);\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error('❌ Klaviyo API error response:', errorText);\n            throw new Error(`Klaviyo API error: ${response.status} - ${errorText}`);\n        }\n        // Handle empty responses (common for successful events)\n        const responseText = await response.text();\n        console.log('📄 Klaviyo response text:', responseText);\n        if (!responseText || responseText.trim() === '') {\n            console.log('✅ Empty response from Klaviyo (likely successful)');\n            return {};\n        }\n        try {\n            return JSON.parse(responseText);\n        } catch (parseError) {\n            console.warn('⚠️ Failed to parse Klaviyo response as JSON:', responseText);\n            return {};\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (KlaviyoService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/klaviyo.ts\n");

/***/ }),

/***/ "(api)/./pages/api/track-quote-started.ts":
/*!******************************************!*\
  !*** ./pages/api/track-quote-started.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_klaviyo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/klaviyo */ \"(api)/./lib/klaviyo.ts\");\n\nasync function handler(req, res) {\n    // Add debug logging\n    console.log('🚀 Track quote started API called');\n    console.log('📋 Request body:', req.body);\n    console.log('🔑 Klaviyo key exists:', !!process.env.KLAVIYO_PRIVATE_API_KEY);\n    console.log('📧 Admin email:', process.env.ADMIN_EMAIL);\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            message: 'Method not allowed'\n        });\n    }\n    try {\n        const { vehicleReg, quoteId, userEmail, userPhone } = req.body;\n        if (!vehicleReg || !quoteId) {\n            return res.status(400).json({\n                message: 'Vehicle registration and quote ID are required'\n            });\n        }\n        // Get user agent and IP address for tracking\n        const userAgent = req.headers['user-agent'] || '';\n        const ipAddress = req.headers['x-forwarded-for'] || req.headers['x-real-ip'] || req.connection.remoteAddress || '';\n        console.log('📤 Sending to Klaviyo...');\n        // Track the quote started event\n        await _lib_klaviyo__WEBPACK_IMPORTED_MODULE_0__[\"default\"].trackQuoteStarted({\n            vehicleReg,\n            quoteId,\n            userEmail,\n            userPhone,\n            timestamp: new Date().toISOString(),\n            userAgent,\n            ipAddress: Array.isArray(ipAddress) ? ipAddress[0] : ipAddress\n        });\n        console.log('✅ Successfully sent to Klaviyo');\n        return res.status(200).json({\n            success: true,\n            message: 'Quote started event tracked successfully'\n        });\n    } catch (error) {\n        console.error('❌ Error tracking quote started:', error);\n        return res.status(500).json({\n            message: 'Failed to track quote started event',\n            error: error instanceof Error ? error.message : 'Unknown error'\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvdHJhY2stcXVvdGUtc3RhcnRlZC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUMrQztBQUVoQyxlQUFlQyxRQUFRQyxHQUFtQixFQUFFQyxHQUFvQjtJQUM3RSxvQkFBb0I7SUFDcEJDLFFBQVFDLEdBQUcsQ0FBQztJQUNaRCxRQUFRQyxHQUFHLENBQUMsb0JBQW9CSCxJQUFJSSxJQUFJO0lBQ3hDRixRQUFRQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQ0UsUUFBUUMsR0FBRyxDQUFDQyx1QkFBdUI7SUFDM0VMLFFBQVFDLEdBQUcsQ0FBQyxtQkFBbUJFLFFBQVFDLEdBQUcsQ0FBQ0UsV0FBVztJQUV0RCxJQUFJUixJQUFJUyxNQUFNLEtBQUssUUFBUTtRQUN6QixPQUFPUixJQUFJUyxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQUVDLFNBQVM7UUFBcUI7SUFDOUQ7SUFFQSxJQUFJO1FBQ0YsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLE9BQU8sRUFBRUMsU0FBUyxFQUFFQyxTQUFTLEVBQUUsR0FBR2hCLElBQUlJLElBQUk7UUFFOUQsSUFBSSxDQUFDUyxjQUFjLENBQUNDLFNBQVM7WUFDM0IsT0FBT2IsSUFBSVMsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztnQkFBRUMsU0FBUztZQUFpRDtRQUMxRjtRQUVBLDZDQUE2QztRQUM3QyxNQUFNSyxZQUFZakIsSUFBSWtCLE9BQU8sQ0FBQyxhQUFhLElBQUk7UUFDL0MsTUFBTUMsWUFBWW5CLElBQUlrQixPQUFPLENBQUMsa0JBQWtCLElBQUlsQixJQUFJa0IsT0FBTyxDQUFDLFlBQVksSUFBSWxCLElBQUlvQixVQUFVLENBQUNDLGFBQWEsSUFBSTtRQUVoSG5CLFFBQVFDLEdBQUcsQ0FBQztRQUVaLGdDQUFnQztRQUNoQyxNQUFNTCxzRUFBZ0MsQ0FBQztZQUNyQ2U7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQU8sV0FBVyxJQUFJQyxPQUFPQyxXQUFXO1lBQ2pDUjtZQUNBRSxXQUFXTyxNQUFNQyxPQUFPLENBQUNSLGFBQWFBLFNBQVMsQ0FBQyxFQUFFLEdBQUdBO1FBQ3ZEO1FBRUFqQixRQUFRQyxHQUFHLENBQUM7UUFFWixPQUFPRixJQUFJUyxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQzFCaUIsU0FBUztZQUNUaEIsU0FBUztRQUNYO0lBQ0YsRUFBRSxPQUFPaUIsT0FBTztRQUNkM0IsUUFBUTJCLEtBQUssQ0FBQyxtQ0FBbUNBO1FBQ2pELE9BQU81QixJQUFJUyxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQzFCQyxTQUFTO1lBQ1RpQixPQUFPQSxpQkFBaUJDLFFBQVFELE1BQU1qQixPQUFPLEdBQUc7UUFDbEQ7SUFDRjtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbXVoYW1tYWRhbGkvRGVza3RvcC9XaW5kc2NyZWVuQ29tcGFyZS93aW5kc2hpZWxkX2NvbXBhcmUvV2luZENvbXBhcmUvcGFnZXMvYXBpL3RyYWNrLXF1b3RlLXN0YXJ0ZWQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCc7XG5pbXBvcnQgS2xhdml5b1NlcnZpY2UgZnJvbSAnLi4vLi4vbGliL2tsYXZpeW8nO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKHJlcTogTmV4dEFwaVJlcXVlc3QsIHJlczogTmV4dEFwaVJlc3BvbnNlKSB7XG4gIC8vIEFkZCBkZWJ1ZyBsb2dnaW5nXG4gIGNvbnNvbGUubG9nKCfwn5qAIFRyYWNrIHF1b3RlIHN0YXJ0ZWQgQVBJIGNhbGxlZCcpO1xuICBjb25zb2xlLmxvZygn8J+TiyBSZXF1ZXN0IGJvZHk6JywgcmVxLmJvZHkpO1xuICBjb25zb2xlLmxvZygn8J+UkSBLbGF2aXlvIGtleSBleGlzdHM6JywgISFwcm9jZXNzLmVudi5LTEFWSVlPX1BSSVZBVEVfQVBJX0tFWSk7XG4gIGNvbnNvbGUubG9nKCfwn5OnIEFkbWluIGVtYWlsOicsIHByb2Nlc3MuZW52LkFETUlOX0VNQUlMKTtcblxuICBpZiAocmVxLm1ldGhvZCAhPT0gJ1BPU1QnKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5qc29uKHsgbWVzc2FnZTogJ01ldGhvZCBub3QgYWxsb3dlZCcgfSk7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHsgdmVoaWNsZVJlZywgcXVvdGVJZCwgdXNlckVtYWlsLCB1c2VyUGhvbmUgfSA9IHJlcS5ib2R5O1xuICAgIFxuICAgIGlmICghdmVoaWNsZVJlZyB8fCAhcXVvdGVJZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ1ZlaGljbGUgcmVnaXN0cmF0aW9uIGFuZCBxdW90ZSBJRCBhcmUgcmVxdWlyZWQnIH0pO1xuICAgIH1cblxuICAgIC8vIEdldCB1c2VyIGFnZW50IGFuZCBJUCBhZGRyZXNzIGZvciB0cmFja2luZ1xuICAgIGNvbnN0IHVzZXJBZ2VudCA9IHJlcS5oZWFkZXJzWyd1c2VyLWFnZW50J10gfHwgJyc7XG4gICAgY29uc3QgaXBBZGRyZXNzID0gcmVxLmhlYWRlcnNbJ3gtZm9yd2FyZGVkLWZvciddIHx8IHJlcS5oZWFkZXJzWyd4LXJlYWwtaXAnXSB8fCByZXEuY29ubmVjdGlvbi5yZW1vdGVBZGRyZXNzIHx8ICcnO1xuXG4gICAgY29uc29sZS5sb2coJ/Cfk6QgU2VuZGluZyB0byBLbGF2aXlvLi4uJyk7XG4gICAgXG4gICAgLy8gVHJhY2sgdGhlIHF1b3RlIHN0YXJ0ZWQgZXZlbnRcbiAgICBhd2FpdCBLbGF2aXlvU2VydmljZS50cmFja1F1b3RlU3RhcnRlZCh7XG4gICAgICB2ZWhpY2xlUmVnLFxuICAgICAgcXVvdGVJZCxcbiAgICAgIHVzZXJFbWFpbCxcbiAgICAgIHVzZXJQaG9uZSxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgdXNlckFnZW50LFxuICAgICAgaXBBZGRyZXNzOiBBcnJheS5pc0FycmF5KGlwQWRkcmVzcykgPyBpcEFkZHJlc3NbMF0gOiBpcEFkZHJlc3NcbiAgICB9KTtcblxuICAgIGNvbnNvbGUubG9nKCfinIUgU3VjY2Vzc2Z1bGx5IHNlbnQgdG8gS2xhdml5bycpO1xuXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgXG4gICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgIG1lc3NhZ2U6ICdRdW90ZSBzdGFydGVkIGV2ZW50IHRyYWNrZWQgc3VjY2Vzc2Z1bGx5JyBcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgdHJhY2tpbmcgcXVvdGUgc3RhcnRlZDonLCBlcnJvcik7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgXG4gICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIHRyYWNrIHF1b3RlIHN0YXJ0ZWQgZXZlbnQnLFxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgfSk7XG4gIH1cbn0gIl0sIm5hbWVzIjpbIktsYXZpeW9TZXJ2aWNlIiwiaGFuZGxlciIsInJlcSIsInJlcyIsImNvbnNvbGUiLCJsb2ciLCJib2R5IiwicHJvY2VzcyIsImVudiIsIktMQVZJWU9fUFJJVkFURV9BUElfS0VZIiwiQURNSU5fRU1BSUwiLCJtZXRob2QiLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsInZlaGljbGVSZWciLCJxdW90ZUlkIiwidXNlckVtYWlsIiwidXNlclBob25lIiwidXNlckFnZW50IiwiaGVhZGVycyIsImlwQWRkcmVzcyIsImNvbm5lY3Rpb24iLCJyZW1vdGVBZGRyZXNzIiwidHJhY2tRdW90ZVN0YXJ0ZWQiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJBcnJheSIsImlzQXJyYXkiLCJzdWNjZXNzIiwiZXJyb3IiLCJFcnJvciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./pages/api/track-quote-started.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftrack-quote-started&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ftrack-quote-started.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();